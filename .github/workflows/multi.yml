#==============================================================================
#   Copyright (c) 2022 Nikita Kniazev
#
#   Use, modification and distribution is subject to the Boost Software
#   License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
#   http://www.boost.org/LICENSE_1_0.txt)
#==============================================================================

name: Multiarch CI

on:
  pull_request:
  push:

jobs:
  emulated:
    name: ${{ matrix.container || matrix.default-container }} ${{ matrix.platform }} ${{ matrix.toolset }}
    runs-on: ${{ matrix.os || 'ubuntu-latest' }}
    strategy:
      fail-fast: false
      matrix:
        default-container: [ 'debian:latest' ]
        container: [ null ]
        toolset: [ 'gcc', 'clang' ]
        platform:
          - linux/386
          - linux/amd64
          - linux/arm/v5
          - linux/arm/v7
          - linux/arm64/v8
          - linux/mips64le
          - linux/ppc64le
          - linux/s390x
        exclude:
          # Clang has issues with platform detection
          - { platform: linux/arm/v5, toolset: clang }
          - { platform: linux/arm/v7, toolset: clang }
          # CALL16 reloc at 0x14 not against global symbol
          # BFD (GNU Binutils for Debian) 2.40 assertion fail ../../bfd/elfxx-mips.c:3669
          - { platform: linux/mips64le, toolset: clang }
        include:
          - { container: 'debian:experimental', platform: linux/riscv64, toolset: gcc }
          - { container: 'debian:experimental', platform: linux/riscv64, toolset: clang }
          - { container: 'multiarch/debian-debootstrap:mipsel-buster', toolset: gcc }
          - { container: 'multiarch/debian-debootstrap:mips-buster', toolset: gcc }

    steps:
      - name: Checkout Boost super-repo
        env:
          REF: ${{ github.base_ref || github.ref_name }}
          BRANCH: ${{ env.REF != 'develop' && env.REF != 'master' && 'develop' || env.REF }}
        shell: bash
        run: git clone -j10 --depth=1 --branch=${{ env.BRANCH }} --no-tags
             https://github.com/boostorg/boost.git '${{ github.workspace }}'

      - name: Checkout minimal Boost
        run: git submodule update --init --depth 1 --jobs 10 --single-branch --
          tools/build
          libs/config
          tools/boostdep

      - name: Checkout the commit
        uses: actions/checkout@v4
        with:
          path: libs/context

      - name: Checkout library dependencies
        run: python tools/boostdep/depinst/depinst.py --git_args "--jobs 10" context

      - name: "Setup QEMU and Docker"
        if: matrix.container || matrix.platform
        run: |
          set -eu
          sudo apt-get -o Acquire::Retries=3 update
          sudo apt-get -o Acquire::Retries=3 -y install qemu-user-static

      - name: "Building and testing on ${{ matrix.container || matrix.default-container }} ${{ matrix.platform }}"
        uses: addnab/docker-run-action@v3
        if: matrix.container || matrix.platform
        with:
          image: ${{ matrix.container || matrix.default-container }}
          options: -v ${{ github.workspace }}:/boost-root -w /boost-root ${{ matrix.platform && format('--platform {0}', matrix.platform) || '' }}
          run: |
            set -eu
            uname -m
            dpkg --print-architecture
            echo "::group::Install ${{ matrix.toolset }}"
              apt-get -o Acquire::Retries=3 update
              apt-get -o Acquire::Retries=3 -yq --no-install-suggests --no-install-recommends install g++ ${{ matrix.toolset }} cmake make
            echo "::endgroup::"
            echo "::group::${{ matrix.toolset }} info"
              ${{ matrix.toolset }} -v
            echo "::endgroup::"

            cmake -B build -DCMAKE_CXX_COMPILER=${{ matrix.toolset }} -DBOOST_INCLUDE_LIBRARIES=context .
            cmake --build build

  native:
    name: native ${{ matrix.os }} ${{ matrix.toolset }} ${{ matrix.msys }} ${{ matrix.info }}
    runs-on: ${{ matrix.os }}-latest
    strategy:
      fail-fast: false
      matrix:
        os: [ 'ubuntu' ]
        toolset: [ 'gcc', 'clang' ]
        include:
          - { os: macos, toolset: darwin }
          - { os: macos, toolset: gcc-12 }
          - { os: macos, toolset: clang }
          - { os: macos, toolset: clang, options: '"compileflags=-arch arm64 -arch x86_64"', info: dual-arch }
          - { os: macos, toolset: clang, options: 'architecture=arm testing.execute=off', info: target-arm }
          - { os: windows, toolset: gcc }
          - { os: windows, toolset: msvc }
          - { os: windows, toolset: msvc, options: address-model=32, info: 32bit }
          - { os: windows, toolset: msvc, options: 'architecture=arm address-model=32 testing.execute=off', info: target-arm32 }
          - { os: windows, toolset: msvc, options: 'architecture=arm address-model=64 testing.execute=off', info: target-arm64 }
          - { os: windows, toolset: clang-win, options: embed-manifest-via=linker }
          - { os: windows, toolset: clang-win, options: 'embed-manifest-via=linker address-model=32', info: 32bit }
          # fatal error: error in backend: Cannot select: 0x1dbc36135c0: ch = cleanupret 0x1dbc3613a38
          #- { os: windows, toolset: clang-win, options: 'embed-manifest-via=linker architecture=arm address-model=32 testing.execute=off', info: target-arm32 }
          - { os: windows, toolset: clang-win, options: 'embed-manifest-via=linker architecture=arm address-model=64 testing.execute=off', info: target-arm64 }
          - { os: windows, toolset: gcc, msys: mingw32 }
          - { os: windows, toolset: gcc, msys: ucrt64 }
          - { os: windows, toolset: clang, msys: clang64 }

    defaults:
      run:
        shell: ${{ matrix.msys && 'msys2 {0}' || 'bash' }}

    steps:
      - name: Install MSYS2
        if: matrix.msys
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.msys }}
          pacboy: ${{ matrix.toolset }}:p

      - name: Checkout Boost super-repo
        env:
          REF: ${{ github.base_ref || github.ref_name }}
          BRANCH: ${{ env.REF != 'develop' && env.REF != 'master' && 'develop' || env.REF }}
        shell: bash
        run: git clone -j10 --depth=1 --branch=${{ env.BRANCH }} --no-tags
             https://github.com/boostorg/boost.git '${{ github.workspace }}'

      - name: Checkout minimal Boost
        shell: bash
        run: git submodule update --init --depth 1 --jobs 10 --single-branch --
          tools/build
          libs/config
          tools/boostdep

      - name: Checkout the commit
        uses: actions/checkout@v4
        with:
          path: libs/context

      - name: Checkout library dependencies
        shell: bash
        run: python tools/boostdep/depinst/depinst.py --git_args "--jobs 10" context

      - name: Init CMake Build
        run: cmake -B build -DBOOST_INCLUDE_LIBRARIES=context .

      - name: CMake Build
        run: cmake --build build

      #- ctest --output-on-failure -R boost_preprocessor -C Debug
